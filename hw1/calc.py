"""
Basic calculator
================

A simple example of a REPL calculator

This example shows how to write a basic calculator with variables.
"""

from lark import Lark, Transformer, v_args
import sys


try:
    input = raw_input   # For Python2 compatibility
except NameError:
    pass


calc_grammar = """
    ?start: sum
          | NAME "=" sum    -> assign_var

    ?sum: product
        | sum "+" product   -> add
        | sum "-" product   -> sub

    ?product: atom
        | product "*" atom  -> mul
        | product "/" atom  -> div

    ?atom: NUMBER           -> number
         | "-" atom         -> neg
         | NAME             -> var
         | "(" sum ")"

    %import common.CNAME -> NAME
    %import common.NUMBER
    %import common.WS_INLINE

    %ignore WS_INLINE
"""

@v_args(inline=True)    # Affects the signatures of the methods
class CalculateTree(Transformer):

    def __init__(self):
        self.vars = {}

    def number(self, a):
        print("    const", a)
        return int(a)

    def add(self, a, b):
        print("    call Int:plus")
        return a + b

    def sub(self, a, b):
        print("    call Int:minus")
        return a - b

    def mul(self, a, b):
        print("    call Int:times")
        return a * b

    def div(self, a, b):
        print("    call Int:divide")
        return int(a / b) # Keep it an integer

    def neg(self, a):
        print("    call Int:negate")
        return -a

    def assign_var(self, name, value):
        self.vars[name] = value
        return value

    def var(self, name):
        try:
            return self.vars[name]
        except KeyError:
            raise Exception("Variable not found: %s" % name)


calc_parser = Lark(calc_grammar, parser='lalr', transformer=CalculateTree())
calc = calc_parser.parse


if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print(f"Usage: {sys.argv[0]} <expression>")
        exit(1)
    s = sys.argv[1]
    print("# Autogenerated assembly for expression:", s)
    print()
    print(".class Sample:Obj")
    print()
    print(".method $constructor")
    result = calc(s) # result = expected result
    print("    call Int:print # expected value is", result)
    print("    return 0")
