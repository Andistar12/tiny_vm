/*
    Calculates the digits of Pi
    First I implement a random number generator
    Then I implement a Monte Carlo simulator
    Then I use string concat to add a decimal point
*/

class LCG(mult: Int, shift: Int, modulus: Int, seed: Int) {
    // Linear congruential random number generator for integers in [0, modulus)
    
    this.mult = mult;
    this.shift = shift;
    this.modulus = modulus;
    this.curr = this.mod(seed, modulus);

    def mod(x: Int, y: Int) : Int {
        // Returns x mod y

        while x >= y {
            x = x - y;
        }

        while x < 0 {
            x = x + y;
        }

        return x;
    }

    def rand() : Int {
        // Returns the next random number
        // Recurrence is x{n+1} = (a * x{n} + c) mod m
        this.curr = this.mod((this.mult * this.curr + this.shift), this.modulus);
        return this.curr;
    }
}



class MonteCarloPi(resolution: Int, radius: Int, mult: Int, shift: Int) {

    
    /*
    resolution: number of iterations = 10^resolution
    radius: circle radius
    mult, shift: params for LCG RNG

    Basic idea: if we have a square of side length 2r, then the inscribed circle
    has radius r. The probability of a uniform random point in the square being
    inside the circle is the proportion of their areas: 

    (pi r^2) / (4r^2) = (# of random points landing in circle) / (total points)
    Solve for pi: pi = 4 * (# of random points in landing circle) / (tot points)

    Since we don't have floating points in Quack, we set the denominator equal
    to a power of ten to make the division doable with string concat
    */

    this.radius = radius;
    this.rng = LCG(mult, shift, 2 * radius + 1, 0); // Seed 0

    i = 1;
    count = 0;
    while count <= resolution {
        i = i * 10;
        count = count + 1;
    }
    this.iters = i;

    def _calc() : Int {
        // Returns the decimal portion of Pi, i.e. the 14159265 part

        i = 0;
        inside = 0;
        while i < this.iters {

            // Gen random point
            x = this.rng.rand() - this.radius;
            y = this.rng.rand() - this.radius;

            // See if inside circle
            if (x * x + y * y < this.radius * this.radius) {
                inside = inside + 1;
            }

            i = i + 1;
        }

        "After ".print();
        i.print();
        " iterations, ".print();
        inside.print();
        " were inside the circle\n".print();

        numerator = 4 * inside;
        numerator = numerator - 3 * i;
        if numerator < 0 {
            numerator = numerator * -1;
        }
        return numerator;
    }

    def pi() : String {
        // Returns our approximation of Pi as a string

        pi_int = this._calc();
        return "3." + pi_int.string();
    }

}

// Parameters
resolution = 3; //Iters is 10^this
radius = 150; // Circle radius
mult = 23; // Rng multiplier
shift = 37; // Shift

// The computation
mcp = MonteCarloPi(resolution, radius, mult, shift);

"Calculating digits of pi...\n\n".print();
pi = mcp.pi();
pi.print();
